# File: .github/workflows/terraform.yml

name: 'Terraform Deploy'

on:
  pull_request:
    branches:
    - main
    types:
    - closed
  workflow_dispatch:
  
# Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

# Environment variables required for OIDC authentication
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    outputs:
      plan_file: ${{ steps.setplan.outputs.plan_file }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init -backend-config="backend.conf"

      - name: Terraform Plan
        id: setplan
        run: |
          PLAN_NAME="tfplan-${GITHUB_RUN_ID}"
          terraform plan -out=${PLAN_NAME}.binary
          terraform show -no-color ${PLAN_NAME}.binary
          echo "plan_file=${PLAN_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            ${{ steps.setplan.outputs.plan_file }}.binary

  wait-for-approval:
    name: Wait for Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment:
      name: production  # <- das Environment mit Approval!
    steps:
      - name: Approval Gate
        run: echo "Waiting for approval..."

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: wait-for-approval
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan

      - name: Terraform Init
        run: terraform init -backend-config="backend.conf"

      - name: Terraform Apply
        run: |
          terraform apply "tfplan-${GITHUB_RUN_ID}.binary"
          terraform show -no-color "tfplan-${GITHUB_RUN_ID}.binary"

      - name: Cleanup Plan Files
        run: rm -f "tfplan-${GITHUB_RUN_ID}.binary"
